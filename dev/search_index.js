var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = JADE191","category":"page"},{"location":"#JADE191","page":"Home","title":"JADE191","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for JADE191.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [JADE191]","category":"page"},{"location":"#JADE191.CityWalk-Tuple{Any, Any}","page":"Home","title":"JADE191.CityWalk","text":"CityWalk(city, adjacencyMatrix)\n\nCompute paths in the city for all 8 cars and return a solution.\n\nReturns a Solution object representing the computed paths.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.buildAdjacencyMatrix-Tuple{Any}","page":"Home","title":"JADE191.buildAdjacencyMatrix","text":"buildAdjacencyMatrix(city)\n\nCompute an adjaceny matrix to represent the connections between junctions.\n\nReturns a Dict D where D[A] is a vector of all junctions connected to A by a street.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.findExtremelyNaiveSolution-Tuple{Int64, Int64, Any}","page":"Home","title":"JADE191.findExtremelyNaiveSolution","text":"findExtremelyNaiveSolution(start_vertex, total_duration, adjacencyMatrix)\n\nCompute paths in the city for all 8 cars.\n\nReturns a Vector containing all the paths. We compute the path using a greedy algorithm, where at each point of the path we aim to travel as much unique new distance as possible.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.getNextVertex-NTuple{4, Any}","page":"Home","title":"JADE191.getNextVertex","text":"getNextVertex(vertex, duration_remaining, visited, adjacencyMatrix)\n\nCompute the next vertex in a given walk.\n\nReturns a Tuple (N, T) where both elements are nothing if the function failed to find a street which is crossable in the amount of time left. If the function is able to find such a street, then N is the next vector in the path and T is the amount of time it takes to travel from the current vertex to N.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.getSinglePath!-NTuple{4, Any}","page":"Home","title":"JADE191.getSinglePath!","text":"getSinglePath!(adjacencyMatrix, start_vertex, total_duration, visited)\n\nCompute a path in the city which can be traversed in total_duration time.\n\nReturns a Vector representing the path.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.main-Tuple{}","page":"Home","title":"JADE191.main","text":"main()\n\nLoads the city data, computes solutions, and stores them.\n\n\n\n\n\n","category":"method"}]
}

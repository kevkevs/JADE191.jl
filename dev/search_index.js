var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = JADE191","category":"page"},{"location":"#JADE191","page":"Home","title":"JADE191","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for JADE191.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [JADE191]","category":"page"},{"location":"#JADE191.CityWalk-NTuple{4, Any}","page":"Home","title":"JADE191.CityWalk","text":"CityWalk(city, adjacencyMatrix, bounding_longitude_data, bounding_latitude_data)\n\nCompute paths in the city for all 8 cars and return a solution.\n\nReturns a Solution object representing the computed paths.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.Dijkstra_longest_path-Tuple{Any, HashCode2014.City, Int64, Any, Int64}","page":"Home","title":"JADE191.Dijkstra_longest_path","text":"Dijkstra_longest_path(adjacencyMatrix, city, start, goal_func, time)\n\nPerform Dijkstra shortest path algorithm.\n\nFinds the path of shortest time connecting start to any junction satisfying goal_func.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.buildAdjacencyMatrix-Tuple{Any}","page":"Home","title":"JADE191.buildAdjacencyMatrix","text":"buildAdjacencyMatrix(city)\n\nCompute an adjaceny matrix to represent the connections between junctions.\n\nReturns a Dict D where D[A] is a vector of all junctions connected to A by a street.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.calculate_new_distance-NTuple{4, Any}","page":"Home","title":"JADE191.calculate_new_distance","text":"calculate_new_distance(output_so_far, new_path, car, city)\n\nCalculate the new distance traveled by adding a new car path.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.findSolution-Tuple{Int64, Int64, Any, Any, Any, Any}","page":"Home","title":"JADE191.findSolution","text":"findSolution(start_vertex::Int64,\n    total_duration,\n    adjacencyMatrix,\n    bounding_longitude_data,\n    bounding_latitude_data,\n    city;\n    display_plot=false\n)\n\nCompute paths in the city for all 8 cars.\n\nReturns a Vector containing all the paths. We compute the path using a greedy algorithm which splits the map into two regions seperated by the river. At each point of the path we aim to travel as much unique new distance as possible.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.getNextVertex-NTuple{9, Any}","page":"Home","title":"JADE191.getNextVertex","text":"getNextVertex(vertex, duration_remaining, visited, adjacencyMatrix,\n    bounding_longitude_data, bounding_latitude_data, city,\n    should_stay_above)\n\nCompute the next vertex in a given walk.\n\nReturns a Tuple (N, T) where both elements are nothing if the function failed to find a street which is crossable in the amount of time left. If the function is able to find such a street, then N is the next vector in the path and T is the amount of time it takes to travel from the current vertex to N. If shouldstayabove is true, then only vertices located above the dividing line are considered. If shouldstayabove is false, then only vertices located below the dividing line are considered.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.getSinglePath!-NTuple{9, Any}","page":"Home","title":"JADE191.getSinglePath!","text":"getSinglePath!(adjacencyMatrix, start_vertex, total_duration, visited)\n\nCompute a path in the city which can be traversed in total_duration time.\n\nReturns a Vector representing the path.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.get_car_trace-Tuple{Any}","page":"Home","title":"JADE191.get_car_trace","text":"get_car_trace(car)\n\nReturn the trace of a car. This is used only for plotting.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.get_paris_layout-Tuple{}","page":"Home","title":"JADE191.get_paris_layout","text":"get_paris_layout()JADE191sed only for plotting.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.is_below_line-NTuple{4, Any}","page":"Home","title":"JADE191.is_below_line","text":"is_below_line(vertex, bounding_longitude_data, bounding_latitude_data, city)\n\nCalculate if the given vertex is located below or above the seperating curve.\n\nThe map of Paris is split along the river that divides the city. Returns true if the given vertex is above that line and false if it is below that line.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.is_out_of_bounds-NTuple{5, Any}","page":"Home","title":"JADE191.is_out_of_bounds","text":"is_out_of_bounds(\n    vertex, other_vertex, bounding_longitude_data, bounding_latitude_data,\n    city\n)\n\nCalculate if a vertex and another vertex are within according to the division.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.main-Tuple{}","page":"Home","title":"JADE191.main","text":"main()\n\nPerform a single run of the path-finding algorithm.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.plot_path-NTuple{4, Any}","page":"Home","title":"JADE191.plot_path","text":"plot_path(p, car, path, city)\n\nPlot the path of a car traveling through the city.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.read_from_file-Tuple{Any}","page":"Home","title":"JADE191.read_from_file","text":"read_from_file(filename)\n\nRead the coordinates defining the splitting line through the river.\n\n\n\n\n\n","category":"method"},{"location":"#JADE191.trial-NTuple{12, Any}","page":"Home","title":"JADE191.trial","text":"trial(\n    adjacencyMatrix,\n    start_vertex,\n    total_duration,\n    bounding_longitude_data,\n    bounding_latitude_data,\n    city,\n    expected_diff_per_car,\n    still_apply_expectation_max_value,\n    max_attempts,\n    num_cars,\n    trial_num,\n    should_stay_above,\n)\n\nPerform a single trial of finding four cars to map out a region of Paris.\n\n\n\n\n\n","category":"method"}]
}
